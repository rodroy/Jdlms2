/**
 * This class file was automatically generated by the AXDR compiler that is part of jDLMS (http://www.openmuc.org)
 */

package org.openmuc.axdr.compiler.someexamples.generated;

import java.io.IOException;
import java.io.InputStream;
import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.*;
import org.openmuc.jdlms.internal.asn1.axdr.types.*;

public class SequenceOfAll implements AxdrType {

	public static class SubSeqOf_my_sequence extends AxdrSequenceOf<My_Sequence> {

		protected My_Sequence createListElement() {
			return new My_Sequence();
		}
		protected SubSeqOf_my_sequence(int length) {
			super(length);
		}
		public SubSeqOf_my_sequence() {} // Call empty base constructor

	}

	public byte[] code = null;
	public AxdrInteger myInteger = null;

	public AxdrInteger myInteger2 = null;

	public AxdrBoolean myBoolean = null;

	public AxdrBitString bitString = null;

	public AxdrEnum enumerated = null;

	public AxdrGeneralizedTime generalizedTime = null;

	public AxdrNull myNull = null;

	public AxdrOctetString octetString = null;

	public AxdrVisibleString visibleString = null;

	public SubSeqOf_my_sequence my_sequence = null;

	public My_Choice my_choice = null;

	public SequenceOfAll() {
	}

	public SequenceOfAll(byte[] code) {
		this.code = code;
	}

	public SequenceOfAll(AxdrInteger myInteger, AxdrInteger myInteger2, AxdrBoolean myBoolean, AxdrBitString bitString, AxdrEnum enumerated, AxdrGeneralizedTime generalizedTime, AxdrNull myNull, AxdrOctetString octetString, AxdrVisibleString visibleString, SubSeqOf_my_sequence my_sequence, My_Choice my_choice) {
		this.myInteger = myInteger;
		this.myInteger2 = myInteger2;
		this.myBoolean = myBoolean;
		this.bitString = bitString;
		this.enumerated = enumerated;
		this.generalizedTime = generalizedTime;
		this.myNull = myNull;
		this.octetString = octetString;
		this.visibleString = visibleString;
		this.my_sequence = my_sequence;
		this.my_choice = my_choice;
	}

	public int encode(BerByteArrayOutputStream axdrOStream) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				axdrOStream.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			codeLength += my_choice.encode(axdrOStream);
			
			codeLength += my_sequence.encode(axdrOStream);
			
			codeLength += visibleString.encode(axdrOStream);
			
			codeLength += octetString.encode(axdrOStream);
			
			codeLength += myNull.encode(axdrOStream);
			
			codeLength += generalizedTime.encode(axdrOStream);
			
			codeLength += enumerated.encode(axdrOStream);
			
			codeLength += bitString.encode(axdrOStream);
			
			codeLength += myBoolean.encode(axdrOStream);
			
			codeLength += myInteger2.encode(axdrOStream);
			
			codeLength += myInteger.encode(axdrOStream);
			
		}

		return codeLength;

	}

	public int decode(InputStream iStream) throws IOException {
		int codeLength = 0;

		myInteger = new AxdrInteger();
		codeLength += myInteger.decode(iStream);

		myInteger2 = new AxdrInteger();
		codeLength += myInteger2.decode(iStream);

		myBoolean = new AxdrBoolean();
		codeLength += myBoolean.decode(iStream);

		bitString = new AxdrBitString();
		codeLength += bitString.decode(iStream);

		enumerated = new AxdrEnum();
		codeLength += enumerated.decode(iStream);

		generalizedTime = new AxdrGeneralizedTime();
		codeLength += generalizedTime.decode(iStream);

		myNull = new AxdrNull();
		codeLength += myNull.decode(iStream);

		octetString = new AxdrOctetString();
		codeLength += octetString.decode(iStream);

		visibleString = new AxdrVisibleString();
		codeLength += visibleString.decode(iStream);

		my_sequence = new SubSeqOf_my_sequence();
		codeLength += my_sequence.decode(iStream);

		my_choice = new My_Choice();
		codeLength += my_choice.decode(iStream);

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream axdrOStream = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(axdrOStream);
		code = axdrOStream.getArray();
	}
	public String toString() {
		return "sequence: {"+ "myInteger: " + myInteger + ", myInteger2: " + myInteger2 + ", myBoolean: " + myBoolean + ", bitString: " + bitString + ", enumerated: " + enumerated + ", generalizedTime: " + generalizedTime + ", myNull: " + myNull + ", octetString: " + octetString + ", visibleString: " + visibleString + ", my_sequence: " + my_sequence + ", my_choice: " + my_choice  + "}";
	}

}

