
project.ext {

  cfgVersion = '0.11.3'
  
  cfgGroup = 'org.openmuc'

  cfgCopyDependencies = true

  cfgCopyToRoot = false

  cfgSignPom = true

  cfgRepository = project.properties.sonatypeRepository

  cfgSnapshotRepository = project.properties.sonatypeSnapshotRepository

  cfgRepositoryUser = project.properties.sonatypeUser

  cfgRepositoryPass = project.properties.sonatypePass

  javaProjects = allprojects

  distributionProjects = javaProjects.findAll {
    it.getPath() == ':' ||
    it.getPath() == ':axdr-compiler'
  }

  docProjects = distributionProjects.findAll {
    it.getPath() == ':'
  }

  repositoryProjects = distributionProjects.findAll {
    it.getPath() == ':'
  }
}

tasks.withType(Tar) {

  into(project.name) {
    from('./') {
      include 'build.gradle'
      include 'configuration.gradle'
      include 'license/**'
      include 'doc/*.txt'
      include 'doc/userguide/' + project.name + '-doc*.html'
      include 'doc/userguide/' + project.name + '-doc_img/**'
      include 'run-scripts/**'
      include 'build/libs-all/**'
      include 'build/docs/javadoc/**'
      include 'dependencies/**'
      include 'src/**'

      include 'asn1/cosem/**'
      include 'asn1/isoAcseLayer/**'

      include 'asn1/axdr-compiler/build.gradle'
      include 'asn1/axdr-compiler/src/**'
      include 'asn1/axdr-compiler/grammatic/**'
      include 'asn1/axdr-compiler/dependencies/**'
      include 'asn1/axdr-compiler/license/**'
      include 'asn1/axdr-compiler/build/libs-all/*.jar'
      include 'asn1/axdr-compiler/run-scripts/**'
    }

    if (name.equals("tar") ){
      exclude '**/dependencies/**/src'
    }

    from('./build/') {
      include 'settings.gradle'
    }

  }
}


//------------------project specific configurations--------------------

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'osgi'
apply plugin: 'maven'
apply plugin: 'signing'


dependencies {
  compile group: 'org.openmuc', name: 'jasn1', version: '1.5.0'
  //  compile files('dependencies/jasn1/jasn1-1.4.1-SNAPSHOT.jar')
  compile files('dependencies/rxtx/rxtxcomm_api-2.2pre2.jar')
  compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: 1.53

  testCompile 'org.mockito:mockito-core:1.10.19'
  testCompile 'org.powermock:powermock-api-mockito:1.6.2' 
  testCompile 'org.powermock:powermock-module-junit4:1.6.2' 
}

sourceSets {
  main {
    java.srcDirs = ['src/main/java', 'src/main/java-gen']
  }
}

jar {
  manifest {
    name = 'jDLMS'
    instruction 'Export-Package', '!*.internal.*,*'
  }
}

uploadArchives {
  repositories {
    mavenDeployer {
      pom.project {
        name 'jDLMS'
        description 'jDLMS is a library implementing the DLMS/COSEM communication standard (client).'
        
        licenses {
          license {
            name 'GNU General Public License'
            url 'http://www.gnu.org/copyleft/gpl-3.0.html'
            distribution 'repo'
          }
        }
        
      }
    }
  }
}

